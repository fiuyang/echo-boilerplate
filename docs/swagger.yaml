definitions:
  dto.CreateCustomerBatchRequest:
    properties:
      customers:
        items:
          $ref: '#/definitions/dto.CreateCustomerRequest'
        type: array
    required:
    - customers
    type: object
  dto.CreateCustomerRequest:
    properties:
      address:
        example: 123 Main St, Anytown, USA
        type: string
      email:
        example: admin@gmail.com
        type: string
      phone:
        example: "1234567890"
        type: string
      username:
        example: admin
        type: string
    required:
    - address
    - email
    - phone
    - username
    type: object
  dto.CustomerResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      phone:
        type: string
      username:
        type: string
    type: object
  dto.DeleteBatchCustomerRequest:
    properties:
      id:
        items:
          type: integer
        type: array
    required:
    - id
    type: object
  dto.JsonBadRequest:
    properties:
      code:
        example: 400
        type: integer
      errors:
        additionalProperties:
          type: string
        example:
          email: email is required
          username: username is required
        type: object
      status:
        example: BAD REQUEST
        type: string
      trace_id:
        example: dedc5250-5c20-48c9-9383-fac3ccff2679
        type: string
    type: object
  dto.JsonCreated:
    properties:
      code:
        example: 201
        type: integer
      data: {}
      message:
        example: Created
        type: string
      status:
        example: CREATED
        type: string
      trace_id:
        example: dedc5250-5c20-48c9-9383-fac3ccff2679
        type: string
    type: object
  dto.JsonInternalServerError:
    properties:
      code:
        example: 500
        type: integer
      errors:
        example: error engine or third party
        type: string
      status:
        example: INTERNAL SERVER ERROR
        type: string
      trace_id:
        example: dedc5250-5c20-48c9-9383-fac3ccff2679
        type: string
    type: object
  dto.JsonNotFound:
    properties:
      code:
        example: 404
        type: integer
      errors:
        example: record not found
        type: string
      status:
        example: NOT FOUND
        type: string
      trace_id:
        example: dedc5250-5c20-48c9-9383-fac3ccff2679
        type: string
    type: object
  dto.JsonSuccess:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: Success
        type: string
      status:
        example: OK
        type: string
      trace_id:
        example: dedc5250-5c20-48c9-9383-fac3ccff2679
        type: string
    type: object
  dto.Meta:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total_data:
        type: integer
      total_page:
        type: integer
    type: object
  dto.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      meta:
        $ref: '#/definitions/dto.Meta'
      status:
        type: string
      trace_id:
        type: string
    type: object
  dto.UpdateCustomerRequest:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      phone:
        type: string
      username:
        type: string
    required:
    - address
    - email
    - id
    - phone
    - username
    type: object
info:
  contact: {}
  description: Boilerplate API in Go using Echo framework
  title: Boilerplate API
  version: "1.0"
paths:
  /customers:
    get:
      description: Get all customers.
      parameters:
      - description: all (true or false)
        in: query
        name: all
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: username
        in: query
        name: username
        type: string
      - description: email
        in: query
        name: email
        type: string
      - description: start_date
        in: query
        name: start_date
        type: string
      - description: end_date
        in: query
        name: end_date
        type: string
      - description: sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CustomerResponse'
                  type: array
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.JsonBadRequest'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/dto.JsonNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.JsonInternalServerError'
      summary: Get all customers.
      tags:
      - customers
    post:
      description: Create customer.
      parameters:
      - example: 123 Main St, Anytown, USA
        in: formData
        name: address
        required: true
        type: string
      - example: admin@gmail.com
        in: formData
        name: email
        required: true
        type: string
      - example: "1234567890"
        in: formData
        name: phone
        required: true
        type: string
      - example: admin
        in: formData
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Data
          schema:
            allOf:
            - $ref: '#/definitions/dto.JsonCreated'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.JsonBadRequest'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/dto.JsonNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.JsonInternalServerError'
      summary: Create customer
      tags:
      - customers
  /customers/{customerId}:
    get:
      description: get customer by id.
      parameters:
      - description: customer_id
        in: path
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data
          schema:
            allOf:
            - $ref: '#/definitions/dto.JsonSuccess'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.JsonBadRequest'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/dto.JsonNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.JsonInternalServerError'
      summary: get customer by id.
      tags:
      - customers
    patch:
      description: update customer.
      parameters:
      - description: update customer
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomerRequest'
      - description: customer_id
        in: path
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data
          schema:
            allOf:
            - $ref: '#/definitions/dto.JsonSuccess'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.JsonBadRequest'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/dto.JsonNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.JsonInternalServerError'
      summary: update customer
      tags:
      - customers
  /customers/batch:
    delete:
      description: Delete batch customer.
      parameters:
      - description: delete batch customer
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteBatchCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Data
          schema:
            allOf:
            - $ref: '#/definitions/dto.JsonSuccess'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.JsonBadRequest'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/dto.JsonNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.JsonInternalServerError'
      summary: Delete batch customer
      tags:
      - customers
    post:
      description: Create customer batch.
      parameters:
      - description: create customer batch
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerBatchRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Data
          schema:
            allOf:
            - $ref: '#/definitions/dto.JsonCreated'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.JsonBadRequest'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/dto.JsonNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.JsonInternalServerError'
      summary: Create customer batch
      tags:
      - customers
  /customers/export:
    get:
      description: Export Excel customer.
      parameters:
      - description: "true"
        in: query
        name: all
        required: true
        type: string
      - description: start_date
        in: query
        name: start_date
        type: string
      - description: end_date
        in: query
        name: end_date
        type: string
      - description: username
        in: query
        name: username
        type: string
      - description: email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data
          schema:
            allOf:
            - $ref: '#/definitions/dto.JsonSuccess'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.JsonBadRequest'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/dto.JsonNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.JsonInternalServerError'
      summary: Export Excel customer.
      tags:
      - customers
  /customers/import:
    post:
      consumes:
      - multipart/form-data
      description: Import Excel customer.
      parameters:
      - description: Import Excel customer
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Data
          schema:
            allOf:
            - $ref: '#/definitions/dto.JsonSuccess'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.JsonBadRequest'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/dto.JsonNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.JsonInternalServerError'
      summary: Import Excel customer.
      tags:
      - customers
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
